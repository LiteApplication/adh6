variables:
  BACKEND_DIR: $CI_PROJECT_DIR/api_server
  FRONTEND_DIR: $CI_PROJECT_DIR/frontend_angular
  OPENAPI_CLI: /opt/openapi-generator/modules/openapi-generator-cli/target/openapi-generator-cli.jar

.setup_angular_jobs: &before_angular_jobs
  image: node:18-alpine
  before_script:
    - cd frontend_angular/
    - yarn --network-timeout 100000 install --frozen-lockfile

stages:
  - conformity
  - generation
  - lint
  - test
  - build
  - deploy


################################################
########## Execute when merge request ##########
################################################
semgrep:
  stage: conformity
  image: returntocorp/semgrep
  script: semgrep ci --exclude api_server/adh6/member/member_manager.py --exclude reverse_proxy/adh6.template.conf --exclude frontend_angular/yarn.lock --exclude api_server/manage.py
  rules:
  - if: $CI_MERGE_REQUEST_IID
  variables:
    SEMGREP_RULES: >- 
      p/security-audit
      p/secrets
      p/dockerfile
      p/docker-compose
      p/eslint-plugin-security
      p/nodejsscan
      p/flask
      p/xss
      p/jwt
      p/command-injection
      p/r2c-ci
      p/r2c-security-audit
      p/owasp-top-ten
      p/gitlab-bandit
      p/gitlab-eslint


################################
########## Generation ##########
################################
generation:backend_entity:
  stage: generation
  image: openapitools/openapi-generator-cli:latest-release@sha256:c49d9c99124fe2ad94ccef54cc6d3362592e7ca29006a8cf01337ab10d1c01f4
#  only:
#    changes:
#      - openapi/spec.yaml
  script:
    - java -jar $OPENAPI_CLI generate -i openapi/spec.yaml -g python-flask -o tmpsrc --additional-properties packageName=adh6 --additional-properties=modelPackage=entity
    - cp -r tmpsrc/adh6/entity/* api_server/adh6/entity/
    - cp tmpsrc/adh6/typing_utils.py api_server/adh6/
    - cp tmpsrc/adh6/util.py api_server/adh6/
    - sed -i 's/result\[attr\]/result\[self.attribute_map\[attr\]\]/g' api_server/adh6/entity/base_model_.py
  artifacts:
    paths:
    - api_server/adh6
    - api_server/openapi
    expire_in: 1 day

generation:frontend_module:
  stage: generation
  image: openapitools/openapi-generator-cli:latest-release@sha256:c49d9c99124fe2ad94ccef54cc6d3362592e7ca29006a8cf01337ab10d1c01f4
#  only:
#    changes:
#      - openapi/spec.yaml
  script:
    - java -jar $OPENAPI_CLI generate -i openapi/spec.yaml -g typescript-angular -o "frontend_angular/src/app/api" --additional-properties=queryParamObjectFormat=key
    - find frontend_angular/src/app/api/api -type f -name "*.service.ts" -exec sed -i 's/private addToHttpParams(/private addToHttpParamsBad(/g' {} \;
    - find frontend_angular/src/app/api/api -type f -name "*.service.ts" -exec sed -i 's/addToHttpParamsRecursive/addToHttpParams/g' {} \;
  artifacts:
    paths:
    - frontend_angular/src/app/api
    expire_in: 1 day

generation:frontend_assets:
  stage: generation
  image: node:18-alpine
  script:
    - yarn global add svgo
    - cd frontend_angular/src/assets
    - svgo minet.svg adh6-logo.svg minet-dark.svg -o minet.min.svg adh6.min.svg minet-dark.min.svg
  artifacts:
    paths:
    - frontend_angular/src/assets
    expire_in: 1 day


##################################################
########## Linting frontend and backend ##########
##################################################
lint:frontend:
  stage: lint
  needs:
    - generation:frontend_module
    - generation:frontend_assets
  <<: *before_angular_jobs 
  script:
    - yarn lint
  allow_failure: true

lint:backend-code-quality:
  image: python:3.9-alpine
  stage: lint
  needs:
    - generation:backend_entity
  script:
    - cd api_server/
    - pip install pylint
    - pylint --fail-under=1 adh6/* > code_quality.txt
  artifacts:
    expire_in: 1 day
    paths:
      - api_server/code_quality.txt
  allow_failure: true

lint:backend:
  image: python:3.9-alpine
  stage: lint
  needs:
    - generation:backend_entity
  script:
    - cd api_server/
    - pip install black isort
    - black . --extend-exclude migrations,venv
    - isort . --skip venv --skip migrations
  artifacts:
    expire_in: 1 day
    paths:
      - api_server/


####################################
########## Backends Tests ##########
####################################
test:python_check_for_vuln_deps:
  stage: test
  image: python:3.9-alpine
#  only:
#    changes:
#      - api_server/requirements.txt
  script:
    - pip install safety
    - safety check -r api_server/requirements.txt
    - safety check
  allow_failure: true

test:backend:
  stage: test
  needs:
    - generation:backend_entity
    - lint:backend
    - test:python_check_for_vuln_deps
  image: python:3.9-alpine
  before_script:
    - cd api_server/
    - apk add --no-cache wget mariadb-dev build-base libffi-dev
    - pip install -r api_server/requirements.txt
  script:
    - apk add --no-cache sqlite3
    - pip install -r requirements-test.txt
    - coverage run -m pytest
    - coverage report
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml


###########################
########## Build ##########
###########################
build:frontend:
  stage: build
  <<: *before_angular_jobs
  needs:
    - lint:frontend
    - generation:frontend_module
    - generation:frontend_assets
  script:
    - export NODE_OPTIONS=--openssl-legacy-provider
    - yarn build
  artifacts:
    paths:
    - frontend_angular/dist/
    expire_in: 1 day

build:frontend-docker:
  stage: build
  image: quay.io/buildah/stable
  needs:
    - lint:frontend
    - generation:frontend_module
    - generation:frontend_assets
  variables:
    # Use vfs with buildah. Docker offers overlayfs as a default, but buildah
    # cannot stack overlayfs on top of another overlayfs filesystem.
    STORAGE_DRIVER: vfs
    # Write all image metadata in the docker format, not the standard OCI format.
    # Newer versions of docker can handle the OCI format, but older versions, like
    # the one shipped with Fedora 30, cannot handle the format.
    BUILDAH_FORMAT: docker
    # You may need this workaround for some errors: https://stackoverflow.com/a/70438141/1233435
    BUILDAH_ISOLATION: chroot
    FQ_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/adh6-frontend"
  before_script:
    - cd frontend_angular/
    # Log in to the GitLab container registry
    - export REGISTRY_AUTH_FILE=${HOME}/auth.json
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah images
    - buildah build -t $FQ_IMAGE_NAME
    - buildah images
    - buildah push $FQ_IMAGE_NAME
  allow_failure: true

build:backend-docker:
  stage: build
  image: quay.io/buildah/stable
  needs:
    - test:python_check_for_vuln_deps
    - test:backend
    - lint:backend
    - generation:backend_entity
  variables:
    # Use vfs with buildah. Docker offers overlayfs as a default, but buildah
    # cannot stack overlayfs on top of another overlayfs filesystem.
    STORAGE_DRIVER: vfs
    # Write all image metadata in the docker format, not the standard OCI format.
    # Newer versions of docker can handle the OCI format, but older versions, like
    # the one shipped with Fedora 30, cannot handle the format.
    BUILDAH_FORMAT: docker
    # You may need this workaround for some errors: https://stackoverflow.com/a/70438141/1233435
    BUILDAH_ISOLATION: chroot
    FQ_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/adh6-backend"
  before_script:
    - cd api_server/
    # Log in to the GitLab container registry
    - export REGISTRY_AUTH_FILE=${HOME}/auth.json
    - echo "$CI_REGISTRY_PASSWORD" | buildah login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - buildah images
    - buildah build -t $FQ_IMAGE_NAME
    - buildah images
    - buildah push $FQ_IMAGE_NAME
  allow_failure: true


###########################################
########## Deploy in stagged ##############
###########################################
stagged:frontend:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - lint:frontend
    - generation:frontend_module
    - generation:frontend_assets
    - build:frontend
  script:
    - cp -r frontend_angular/dist/adh6/* /var/www/
    - cp -r frontend_angular/src/assets /var/www/assets
  environment:
    name: stagged
    url: https://adh6-stagged.minet.net/
  tags:
    - adh6-stagged

stagged:backend:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - lint:backend
    - test:backend
  before_script:
    - sudo systemctl stop emperor.uwsgi.service
    - cd api_server/
    - sudo -E pip3 install -r ./requirements.txt
  script:
    - /usr/local/bin/mibdump.py --mib-source=mibs.zip CISCO-VLAN-MEMBERSHIP-MIB IF-MIB CISCO-MAC-AUTH-BYPASS-MIB
    - wget -O - -o /dev/null http://standards-oui.ieee.org/oui.txt | grep '(hex)' | sed -E 's/\s*?\(hex\)\s+/\t/' > OUIs.txt
    - cp ../openapi/spec.yaml ./openapi/spec.yaml
    - export FLASK_APP=manage:manager
    - ENVIRONMENT=production flask db upgrade
    - cat uwsgi-prod.template | envsubst | tee uwsgi-prod.ini
    - sudo rm /etc/uwsgi/vassals/adh6_api.ini
    - sudo ln -s $(pwd)/uwsgi-prod.ini /etc/uwsgi/vassals/adh6_api.ini
    - sudo systemctl start emperor.uwsgi.service
  environment:
    name: stagged
    url: https://adh6-stagged.minet.net/
  tags:
    - adh6-stagged


###########################################
########## Deploy in development ##########
###########################################
development:
  stage: deploy
  when: manual
  needs:
    - generation:backend_entity
    - generation:frontend_module
    - generation:frontend_assets
  script:
    - docker-compose -f docker-compose-deploy.yml build
    - docker-compose -f docker-compose-deploy.yml down
    - docker-compose -f docker-compose-deploy.yml up --force-recreate -d 
  environment:
    name: development
    url: https://adh6-dev.minet.net/
  tags:
    - dev


##########################################
########## Deploy in production ##########
##########################################
production_frontend:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  when: manual
  needs:
    - build:frontend
    - generation:frontend_assets
  script:
    - cp -r frontend_angular/dist/adh6/* /var/www/
    - cp -r frontend_angular/src/assets /var/www/assets
  environment:
    name: production
    url: https://adh6.minet.net/
  tags:
    - adh6-prod
    - adh6-frontend

production_backend:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  when: manual
  needs:
    - test:backend
    - lint:backend
  before_script:
    - sudo systemctl stop emperor.uwsgi.service
    - cd api_server/
    - sudo -E pip3 install -r ./requirements.txt
  script:
    - /usr/local/bin/mibdump.py --mib-source=mibs.zip CISCO-VLAN-MEMBERSHIP-MIB IF-MIB CISCO-MAC-AUTH-BYPASS-MIB
    - wget -O - -o /dev/null http://standards-oui.ieee.org/oui.txt | grep '(hex)' | sed -E 's/\s*?\(hex\)\s+/\t/' > OUIs.txt
    - cp ../openapi/spec.yaml ./openapi/spec.yaml
    - export FLASK_APP=manage:manager
    - ENVIRONMENT=production flask db upgrade
    - cat uwsgi-prod.template | envsubst | tee uwsgi-prod.ini
    - sudo rm /etc/uwsgi/vassals/adh6_api.ini
    - sudo ln -s $(pwd)/uwsgi-prod.ini /etc/uwsgi/vassals/adh6_api.ini
    - sudo systemctl start emperor.uwsgi.service
  environment:
    name: production
    url: https://adh6.minet.net/
  tags:
    - adh6-prod
    - adh6-backend
