# coding: utf-8

"""
    ADH6 API

    This is the specification for **MiNET**'s ADH6 plaform. Its aim is to manage our users, devices and treasury.   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: equipe@minet.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.entity.decorator.entity_property import entity_property as property


class MemberStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'comment': 'str',
        'last_timestamp': 'datetime'
    }

    attribute_map = {
        'status': 'status',
        'comment': 'comment',
        'last_timestamp': 'lastTimestamp'
    }

    def __init__(self, status=None, comment=None, last_timestamp=None):  # noqa: E501
        """MemberStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._comment = None
        self._last_timestamp = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if comment is not None:
            self.comment = comment
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp

    @property
    def status(self):
        """Gets the status of this MemberStatus.  # noqa: E501

        The status id :  * `LOGIN_INCORRECT_WRONG_USER` - Some MAC address tried logging in with the wrong username  * `LOGIN_INCORRECT_WRONG_MAC` - The user tried logging in with a MAC address not registered or belonging to another user  * `LOGIN_INCORRECT_WRONG_PASSWORD` - The user tried logging in with the correct MAC address/username combo but an incorrect password  * `LOGIN_INCORRECT_SSL_ERROR` - The user has enabled certificate verification OR another SSL error occurred (invalid time sync...)  * `LOGIN_DEVICE_ERROR` - A device could not be authentified, the other statuses might provide more details   # noqa: E501

        :return: The status of this MemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MemberStatus.

        The status id :  * `LOGIN_INCORRECT_WRONG_USER` - Some MAC address tried logging in with the wrong username  * `LOGIN_INCORRECT_WRONG_MAC` - The user tried logging in with a MAC address not registered or belonging to another user  * `LOGIN_INCORRECT_WRONG_PASSWORD` - The user tried logging in with the correct MAC address/username combo but an incorrect password  * `LOGIN_INCORRECT_SSL_ERROR` - The user has enabled certificate verification OR another SSL error occurred (invalid time sync...)  * `LOGIN_DEVICE_ERROR` - A device could not be authentified, the other statuses might provide more details   # noqa: E501

        :param status: The status of this MemberStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOGIN_INCORRECT_WRONG_USER", "LOGIN_INCORRECT_WRONG_MAC", "LOGIN_INCORRECT_WRONG_PASSWORD", "LOGIN_INCORRECT_SSL_ERROR", "LOGIN_DEVICE_ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def comment(self):
        """Gets the comment of this MemberStatus.  # noqa: E501

        Additionnal data regarding this status  # noqa: E501

        :return: The comment of this MemberStatus.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MemberStatus.

        Additionnal data regarding this status  # noqa: E501

        :param comment: The comment of this MemberStatus.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this MemberStatus.  # noqa: E501

        When this status was last reported  # noqa: E501

        :return: The last_timestamp of this MemberStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this MemberStatus.

        When this status was last reported  # noqa: E501

        :param last_timestamp: The last_timestamp of this MemberStatus.  # noqa: E501
        :type: datetime
        """

        self._last_timestamp = last_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MemberStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MemberStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
