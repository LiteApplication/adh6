# coding: utf-8

"""
    ADH6 API

    This is the specification for **MiNET**'s ADH6 plaform. Its aim is to manage our users, devices and treasury.   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: equipe@minet.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.entity.decorator.entity_property import entity_property as property


class AbstractMember(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'username': 'str',
        'association_mode': 'datetime',
        'comment': 'str',
        'departure_date': 'datetime',
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'room': 'OneOfAbstractMemberRoom',
        'ip': 'str',
        'subnet': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'association_mode': 'associationMode',
        'comment': 'comment',
        'departure_date': 'departureDate',
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'room': 'room',
        'ip': 'ip',
        'subnet': 'subnet'
    }

    def __init__(self, id=None, username=None, association_mode=None, comment=None, departure_date=None, email=None, first_name=None, last_name=None, room=None, ip=None, subnet=None):  # noqa: E501
        """AbstractMember - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._username = None
        self._association_mode = None
        self._comment = None
        self._departure_date = None
        self._email = None
        self._first_name = None
        self._last_name = None
        self._room = None
        self._ip = None
        self._subnet = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if username is not None:
            self.username = username
        if association_mode is not None:
            self.association_mode = association_mode
        if comment is not None:
            self.comment = comment
        if departure_date is not None:
            self.departure_date = departure_date
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if room is not None:
            self.room = room
        if ip is not None:
            self.ip = ip
        if subnet is not None:
            self.subnet = subnet

    @property
    def id(self):
        """Gets the id of this AbstractMember.  # noqa: E501

        The unique identifier of this member  # noqa: E501

        :return: The id of this AbstractMember.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbstractMember.

        The unique identifier of this member  # noqa: E501

        :param id: The id of this AbstractMember.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this AbstractMember.  # noqa: E501

        The username of this member  # noqa: E501

        :return: The username of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AbstractMember.

        The username of this member  # noqa: E501

        :param username: The username of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def association_mode(self):
        """Gets the association_mode of this AbstractMember.  # noqa: E501

        The date-time at which the association mode expires  # noqa: E501

        :return: The association_mode of this AbstractMember.  # noqa: E501
        :rtype: datetime
        """
        return self._association_mode

    @association_mode.setter
    def association_mode(self, association_mode):
        """Sets the association_mode of this AbstractMember.

        The date-time at which the association mode expires  # noqa: E501

        :param association_mode: The association_mode of this AbstractMember.  # noqa: E501
        :type: datetime
        """

        self._association_mode = association_mode

    @property
    def comment(self):
        """Gets the comment of this AbstractMember.  # noqa: E501

        The optional comment for this member  # noqa: E501

        :return: The comment of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this AbstractMember.

        The optional comment for this member  # noqa: E501

        :param comment: The comment of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def departure_date(self):
        """Gets the departure_date of this AbstractMember.  # noqa: E501

        The date-time at which the subscription of this member expires  # noqa: E501

        :return: The departure_date of this AbstractMember.  # noqa: E501
        :rtype: datetime
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """Sets the departure_date of this AbstractMember.

        The date-time at which the subscription of this member expires  # noqa: E501

        :param departure_date: The departure_date of this AbstractMember.  # noqa: E501
        :type: datetime
        """

        self._departure_date = departure_date

    @property
    def email(self):
        """Gets the email of this AbstractMember.  # noqa: E501

        The email address of this member  # noqa: E501

        :return: The email of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AbstractMember.

        The email address of this member  # noqa: E501

        :param email: The email of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this AbstractMember.  # noqa: E501

        The first name of this member  # noqa: E501

        :return: The first_name of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AbstractMember.

        The first name of this member  # noqa: E501

        :param first_name: The first_name of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AbstractMember.  # noqa: E501

        The last name of this member  # noqa: E501

        :return: The last_name of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AbstractMember.

        The last name of this member  # noqa: E501

        :param last_name: The last_name of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def room(self):
        """Gets the room of this AbstractMember.  # noqa: E501

        The room this member lives in  # noqa: E501

        :return: The room of this AbstractMember.  # noqa: E501
        :rtype: OneOfAbstractMemberRoom
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this AbstractMember.

        The room this member lives in  # noqa: E501

        :param room: The room of this AbstractMember.  # noqa: E501
        :type: OneOfAbstractMemberRoom
        """

        self._room = room

    @property
    def ip(self):
        """Gets the ip of this AbstractMember.  # noqa: E501

        The public ipv4 address assigned to this member  # noqa: E501

        :return: The ip of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AbstractMember.

        The public ipv4 address assigned to this member  # noqa: E501

        :param ip: The ip of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def subnet(self):
        """Gets the subnet of this AbstractMember.  # noqa: E501

        The private ipv4 network assigned to this member  # noqa: E501

        :return: The subnet of this AbstractMember.  # noqa: E501
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this AbstractMember.

        The private ipv4 network assigned to this member  # noqa: E501

        :param subnet: The subnet of this AbstractMember.  # noqa: E501
        :type: str
        """

        self._subnet = subnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AbstractMember, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbstractMember):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
