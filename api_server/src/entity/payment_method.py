# coding: utf-8

"""
    ADH6 API

    This is the specification for **MiNET**'s ADH6 plaform. Its aim is to manage our users, devices and treasury.   # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: equipe@minet.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.entity.decorator.entity_property import entity_property as property

from src.entity import AbstractPaymentMethod


class PaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'static_fee': 'float',
        'dynamic_fee': 'float',
        'name': 'str'
    }
    if hasattr(AbstractPaymentMethod, "swagger_types"):
        swagger_types.update(AbstractPaymentMethod.swagger_types)

    attribute_map = {
        'id': 'id',
        'static_fee': 'staticFee',
        'dynamic_fee': 'dynamicFee',
        'name': 'name'
    }
    if hasattr(AbstractPaymentMethod, "attribute_map"):
        attribute_map.update(AbstractPaymentMethod.attribute_map)

    def __init__(self, id=None, static_fee=None, dynamic_fee=None, name=None, *args, **kwargs):  # noqa: E501
        """PaymentMethod - a model defined in Swagger"""  # noqa: E501
        AbstractPaymentMethod.__init__(self, *args, **kwargs)
        self._id = None
        self._static_fee = None
        self._dynamic_fee = None
        self._name = None
        self.discriminator = None
        self.id = id
        if static_fee is not None:
            self.static_fee = static_fee
        if dynamic_fee is not None:
            self.dynamic_fee = dynamic_fee
        self.name = name

    @property
    def id(self):
        """Gets the id of this PaymentMethod.  # noqa: E501

        The unique identifier of this payment method  # noqa: E501

        :return: The id of this PaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethod.

        The unique identifier of this payment method  # noqa: E501

        :param id: The id of this PaymentMethod.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def static_fee(self):
        """Gets the static_fee of this PaymentMethod.  # noqa: E501

        The static fee for this payment method in euros  # noqa: E501

        :return: The static_fee of this PaymentMethod.  # noqa: E501
        :rtype: float
        """
        return self._static_fee

    @static_fee.setter
    def static_fee(self, static_fee):
        """Sets the static_fee of this PaymentMethod.

        The static fee for this payment method in euros  # noqa: E501

        :param static_fee: The static_fee of this PaymentMethod.  # noqa: E501
        :type: float
        """

        self._static_fee = static_fee

    @property
    def dynamic_fee(self):
        """Gets the dynamic_fee of this PaymentMethod.  # noqa: E501

        The dynamic fee for this payment method as a percentage  # noqa: E501

        :return: The dynamic_fee of this PaymentMethod.  # noqa: E501
        :rtype: float
        """
        return self._dynamic_fee

    @dynamic_fee.setter
    def dynamic_fee(self, dynamic_fee):
        """Sets the dynamic_fee of this PaymentMethod.

        The dynamic fee for this payment method as a percentage  # noqa: E501

        :param dynamic_fee: The dynamic_fee of this PaymentMethod.  # noqa: E501
        :type: float
        """

        self._dynamic_fee = dynamic_fee

    @property
    def name(self):
        """Gets the name of this PaymentMethod.  # noqa: E501

        The friendly name of this payment method  # noqa: E501

        :return: The name of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethod.

        The friendly name of this payment method  # noqa: E501

        :param name: The name of this PaymentMethod.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
