/**
 * ADH6 API
 * This is the specification for **MiNET**'s ADH6 plaform. Its aim is to manage our users, devices and treasury. 
 *
 * OpenAPI spec version: 2.0.0
 * Contact: equipe@minet.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class Oauth2Service {

    protected basePath = 'https://adh6.minet.net/api/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param code The OAuth+OIDC code
     * @param returnTo The URL to return to after successful CAS authentication
     * @param scope The OAuth2 scope
     * @param responseMode The OAuth2 response_mode
     * @param redirectUri The OAuth2 redirect_uri
     * @param responseType The OAuth2 response_type
     * @param state The OAuth2 state
     * @param clientId The OAuth2 client_id
     * @param nonce The OAuth2 nonce
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authorizeGet(code?: string, returnTo?: string, scope?: string, responseMode?: string, redirectUri?: string, responseType?: string, state?: string, clientId?: string, nonce?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public authorizeGet(code?: string, returnTo?: string, scope?: string, responseMode?: string, redirectUri?: string, responseType?: string, state?: string, clientId?: string, nonce?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public authorizeGet(code?: string, returnTo?: string, scope?: string, responseMode?: string, redirectUri?: string, responseType?: string, state?: string, clientId?: string, nonce?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public authorizeGet(code?: string, returnTo?: string, scope?: string, responseMode?: string, redirectUri?: string, responseType?: string, state?: string, clientId?: string, nonce?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {










        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (code !== undefined && code !== null) {
            queryParameters = queryParameters.set('code', <any>code);
        }
        if (returnTo !== undefined && returnTo !== null) {
            queryParameters = queryParameters.set('return_to', <any>returnTo);
        }
        if (scope !== undefined && scope !== null) {
            queryParameters = queryParameters.set('scope', <any>scope);
        }
        if (responseMode !== undefined && responseMode !== null) {
            queryParameters = queryParameters.set('response_mode', <any>responseMode);
        }
        if (redirectUri !== undefined && redirectUri !== null) {
            queryParameters = queryParameters.set('redirect_uri', <any>redirectUri);
        }
        if (responseType !== undefined && responseType !== null) {
            queryParameters = queryParameters.set('response_type', <any>responseType);
        }
        if (state !== undefined && state !== null) {
            queryParameters = queryParameters.set('state', <any>state);
        }
        if (clientId !== undefined && clientId !== null) {
            queryParameters = queryParameters.set('client_id', <any>clientId);
        }
        if (nonce !== undefined && nonce !== null) {
            queryParameters = queryParameters.set('nonce', <any>nonce);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/oauth2/authorize`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authorizePost(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public authorizePost(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public authorizePost(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public authorizePost(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/oauth2/authorize`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves this server&#x27;s OpenID configuration
     * This endpoint returns a JSON document that complies with the OpenID standard. This allows applications to discover the server&#x27;s OpenID configuration. **TODO**: Move the whole OAuth2 flow to a standalone server. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public oauth2Config(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public oauth2Config(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public oauth2Config(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public oauth2Config(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/oauth2/.well-known/openid-configuration`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves an authorized user&#x27;s profile
     * This endpoint returns the grants following a user&#x27;s OAuth2 authorization. **TODO**: Move the whole OAuth2 flow to a standalone server. 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public profileGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public profileGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public profileGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public profileGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/oauth2/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
