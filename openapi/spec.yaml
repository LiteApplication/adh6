---
swagger: "2.0"
info:
  description: "Adherent api\n"
  version: "1.0.12"
  title: "Adherent"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "adh6-dev.minet.net"
basePath: "/api"
schemes: [https]
tags:
- name: "member"
  description: "Operations on members"
- name: "membership"
  description: "Manage membership records"
- name: "device"
  description: "Operations on devices"
- name: "room"
  description: "Operations on rooms"
- name: "switch"
  description: "Operations on switches"
- name: "port"
  description: "Operations on ports"
- name: "temporary_account"
  description: "Temporary accounts"
schemes:
- "http"
- "https"
paths:
  /transaction/:
    get:
      tags:
      - "transaction"
      summary: "Filter transactions"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of transactions returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "The generic search terms (will search in any field)"
        required: false
        type: "string"
      - name: "account"
        in: "query"
        description: "Filter by account id (either as source or destination)"
        required: false
        type: "integer"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Transaction"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /transaction/{id}:
    get:
      tags:
      - "transaction"
      summary: "Retrieve"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the transaction that needs to be fetched"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Transaction"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "transaction"
      summary: "Delete"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The unique identifier of the transaction that will be deleted"
        required: true
        type: "integer"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["picsou"]
  /member/:
    get:
      tags:
      - "member"
      summary: "Filter members"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of members returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "The generic search terms (will search in any field)"
        required: false
        type: "string"
      - name: "roomNumber"
        in: "query"
        description: "Filter by room number"
        required: false
        type: "integer"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Member"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /member/{username}:
    get:
      tags:
      - "member"
      summary: "Retrieve"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the member that needs to be fetched."
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Member"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      tags:
      - "member"
      summary: "Update/create"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the member will be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New values of the member"
        required: true
        schema:
          $ref: "#/definitions/Member"

      responses:
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    patch:
      tags:
      - "member"
      summary: "Partially update"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the member will be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New values of the member"
        required: true
        schema:
          $ref: "#/definitions/MemberPatchRequest"
      responses:
        404:
          description: "Not found"
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "member"
      summary: "Delete"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the member that will be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /member/{username}/password/:
    put:
      operationId: src.interface_adapter.http_api.member.put_password
      tags:
      - "member"
      summary: "Update password"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the member will be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New values of the member"
        required: true
        schema:
          type: "object"
          required:
          - "password"
          properties:
            password:
              type: "string"
              example: "&<Hs8XK/H+dT{7d7:=bxN~9;EqhwtW-;"
      responses:
        204:
          description: "Modified"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /member/{username}/logs/:
    get:
      operationId: src.interface_adapter.http_api.member.get_logs
      tags:
      - "member"
      summary: "Get the most recent logs"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "username of the member"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              type: string
              example: "2018-07-14T04:44:51.537Z Password OK"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /member/{username}/membership/:
    post:
      operationId: src.interface_adapter.http_api.member.post_membership
      tags:
      - "membership"
      summary: "Add a membership record for an member"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the member"
        required: true
        type: "string"

      - name: "X-Idempotency-Key"
        in: "header"
        type: string
        description: Just a random string to ensure that membership creation is idempotent (very important since double submission may result to the member being charged two times). I recommand using a long random string for that.
      - in: "body"
        name: "body"
        description: "Membership record, if no start is specified, it will use the\
          \ current date. Duration is expressed in days. WARNING: DO NOT set the start date to be in the future, it is not implemented for the moment."
        required: true
        schema:
          $ref: "#/definitions/MembershipRequest"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /device/:
    get:
      tags:
      - "device"
      summary: "Filter devices"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of devices returned in the result. Default\
          \ is 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "username"
        in: "query"
        description: "Filter by owner's username"
        required: false
        type: "string"
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Device"
        400:
          description: "Invalid input"


      security:
      - oauth2: ["profile"]
  /device/{mac_address}:
    get:
      tags:
      - "device"
      summary: "Retrieve a device"
      produces:
      - "application/json"
      parameters:
      - name: "mac_address"
        in: "path"
        description: "The mac address of the device that will be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Device"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      tags:
      - "device"
      summary: "Update/create a device"
      produces:
      - "application/json"
      parameters:
      - name: "mac_address"
        in: "path"
        description: "The mac address of the device that will be update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Device to update"
        required: true
        schema:
          $ref: "#/definitions/Device"
      responses:
        201:
          description: "Created"
        204:
          description: "Updated"
        400:
          description: "Invalid input"

      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "device"
      summary: "Delete a device"
      produces:
      - "application/json"
      parameters:
      - name: "mac_address"
        in: "path"
        description: "The mac address of the device that will be deleted"
        required: true
        type: "string"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /device/{mac_address}/vendor:
    get:
      operationId: src.interface_adapter.http_api.device.get_vendor
      tags:
      - "device"
      summary: "Retrieve the vendor of a device based on its MAC"
      produces:
      - "application/json"
      parameters:
      - name: "mac_address"
        in: "path"
        description: "The mac address of the device that will be looked up"
        required: true
        type: "string"
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              vendorname:
                type: string
                example: "Cisco Systems, Inc"
        404:
          description: "No match"
      security:
      - oauth2: ["profile"]
  /room/:
    get:
      tags:
      - "room"
      summary: "Filter rooms"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of rooms returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Room"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /room/{roomNumber}:
    get:
      tags:
      - "room"
      summary: "Retrieve a room"
      produces:
      - "application/json"
      parameters:
      - name: "roomNumber"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Room"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      tags:
      - "room"
      summary: "Update/create a room"
      produces:
      - "application/json"
      parameters:
      - name: "roomNumber"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Room to update"
        required: true
        schema:
          $ref: "#/definitions/Room"
      responses:
        201:
          description: "Created"
        204:
          description: "Updated"
        400:
          description: "Invalid input / no more IP"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "room"
      summary: "Delete a room"
      produces:
      - "application/json"
      parameters:
      - name: "roomNumber"
        in: "path"
        required: true
        type: "integer"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /switch/:
    get:
      tags:
      - "switch"
      summary: "Get all switches"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of switches returned in the result. Default\
          \ is 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Switch"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    post:
      tags:
      - "switch"
      summary: "Create a switch"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Switch to create"
        required: true
        schema:
          $ref: "#/definitions/Switch"
      responses:
        200:
          description: "Created"
          headers:
            Location:
              type: "string"
              description: "URI to the newly created switch"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /switch/{switchID}:
    get:
      tags:
      - "switch"
      summary: "Retrieve a switch"
      produces:
      - "application/json"
      parameters:
      - name: "switchID"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Switch"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      tags:
      - "switch"
      summary: "Update a switch"
      produces:
      - "application/json"
      parameters:
      - name: "switchID"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Switch to update"
        required: true
        schema:
          $ref: "#/definitions/Switch"
      responses:
        204:
          description: "Updated"
        404:
          description: "Not found"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "switch"
      summary: "Delete a switch"
      produces:
      - "application/json"
      parameters:
      - name: "switchID"
        in: "path"
        required: true
        type: "integer"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /port/:
    get:
      tags:
      - "port"
      summary: "Filter ports"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of ports returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "switchID"
        in: "query"
        description: "Filter only ports from that switch"
        required: false
        type: "integer"
      - name: "roomNumber"
        in: "query"
        description: "Filter only ports from that room"
        required: false
        type: "integer"
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Port"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    post:
      tags:
      - "port"
      summary: "Create a port"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Port to create"
        required: true
        schema:
          $ref: "#/definitions/Port"
      responses:
        200:
          description: "Created"
          headers:
            Location:
              type: "string"
              description: "URI to the newly created port"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /port/{port_id}:
    get:
      tags:
      - "port"
      summary: "Retrieve a port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Port"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      tags:
      - "port"
      summary: "Update a port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "Port to update"
        required: true
        schema:
          $ref: "#/definitions/Port"
      responses:
        204:
          description: "Updated"
        404:
          description: "Not found"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "port"
      summary: "Delete a port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        204:
          description: "Deleted"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
  /port/{port_id}/state/:
    get:
      operationId: src.interface_adapter.http_api.port.get_state
      tags:
      - "port"
      summary: "Retrieve the status of a port."
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success, false if it is shutdown, true otherwise"
          schema:
            type: boolean
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      operationId: src.interface_adapter.http_api.port.put_state
      tags:
      - "port"
      summary: "Shutdown/enable a port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      - name: "state"
        in: "body"
        required: true
        description: "True to open, False to shutdown"
        schema:
          type: boolean

      responses:
        204:
          description: "Updated"
        404:
          description: "Not found"

      security:
      - oauth2: ["profile"]
  /port/{port_id}/mab/:
    get:
      operationId: src.interface_adapter.http_api.port.get_mab
      tags:
      - "port"
      summary: "Check whether MAB is enable on this port or not."
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "True if MAB is enabled"
          schema:
            type: boolean
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      operationId: src.interface_adapter.http_api.port.put_mab
      tags:
      - "port"
      summary: "Enable/disable MAB on a port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      - name: "state"
        in: "body"
        required: true
        schema:
          type: boolean
      responses:
        204:
          description: "Updated"
        404:
          description: "Not found"

      security:
      - oauth2: ["profile"]

  /port/{port_id}/vlan/:
    get:
      operationId: src.interface_adapter.http_api.port.get_vlan
      tags:
      - "port"
      summary: "Retrieve the VLAN assigned to the port."
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success, returns 1 if the port has authentication on"
          schema:
            example: 48
            type: integer
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    put:
      operationId: src.interface_adapter.http_api.port.put_vlan
      tags:
      - "port"
      summary: "Change the VLAN assigned a to port"
      produces:
      - "application/json"
      parameters:
      - name: "port_id"
        in: "path"
        required: true
        type: "integer"
      - name: "vlan"
        in: "body"
        required: true
        description: "VLAN to assign. Set it to 1 if you want to enable authentication on the port."
        schema:
          type: integer
          example: 48

      responses:
        204:
          description: "Updated"
        404:
          description: "Not found"

      security:
      - oauth2: ["profile"]
  /temporary_account/:
    post:
      tags:
      - "temporary_account"
      summary: "Create new temporary account for this day. Only super admins can do that."
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          type: object
          properties:
            firstname:
              type: string
              example: Jean
            lastname:
              type: string
              example: Dupont
      responses:
        200:
          description: "Success"
          schema:
            type: object
            properties:
              access_token:
                type: string
                example: "NAINA_AMLKSJQLMHFQ"
      security:
      - oauth2: ["profile"]
    delete:
      tags:
      - "temporary_account"
      summary: "Revoke all active temporary accounts."
      produces:
      - "application/json"
      responses:
        204:
          description: "Success"
      security:
      - oauth2: ["profile"]
  /account_type/:
    get:
      tags:
      - "account_type"
      summary: "Filter account types"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of account types returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/AccountType"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /account_type/:
    post:
      tags:
      - "account_type"
      summary: "Create an account type"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Account type to create"
        required: true
        schema:
          $ref: "#/definitions/AccountType"
      responses:
        200:
          description: "Created"
          headers:
            Location:
              type: "string"
              description: "URI to the newly created account type"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /account_type/{account_type_id}:
    get:
      tags:
      - "account_type"
      summary: "Retrieve an account type"
      produces:
      - "application/json"
      parameters:
      - name: "account_type_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/AccountType"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    patch:
      tags:
      - "account_type"
      summary: "Partially update"
      produces:
      - "application/json"
      parameters:
      - name: "account_type_id"
        in: "path"
        description: "Name of the account type will be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New values of the account type"
        required: true
        schema:
          $ref: "#/definitions/AccountTypePatchRequest"
      responses:
        404:
          description: "Not found"
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /payment_method/:
    get:
      tags:
      - "payment_method"
      summary: "Filter payment methods"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of payment methods returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "Search terms"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/PaymentMethod"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /payment_method/:
    post:
      tags:
      - "payment_method"
      summary: "Create a payment method"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Payment method to create"
        required: true
        schema:
          $ref: "#/definitions/PaymentMethod"
      responses:
        200:
          description: "Created"
          headers:
            Location:
              type: "string"
              description: "URI to the newly created payment method"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /payment_method/{payment_method_id}:
    get:
      tags:
      - "payment_method"
      summary: "Retrieve a payment method"
      produces:
      - "application/json"
      parameters:
      - name: "payment_method_id"
        in: "path"
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/PaymentMethod"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    patch:
      tags:
      - "payment_method"
      summary: "Partially update"
      produces:
      - "application/json"
      parameters:
      - name: "payment_method_id"
        in: "path"
        description: "Name of the payment method will be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "New values of the payment method"
        required: true
        schema:
          $ref: "#/definitions/PaymentMethodPatchRequest"
      responses:
        404:
          description: "Not found"
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /account/:
    post:
      tags:
      - "account"
      summary: "Create account"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New values of the account"
        required: true
        schema:
          $ref: "#/definitions/Account"
      responses:
        200:
          description: "Created"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    get:
      tags:
      - "account"
      summary: "Filter accounts"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of accounts returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "The generic search terms (will search in any field)"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
      - name: "type"
        in: "query"
        description: "Filter by type"
        required: false
        type: "integer"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Account"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /account/{id}:
    get:
      tags:
      - "account"
      summary: "Retrieve"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the account that needs to be fetched."
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Account"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
    patch:
      tags:
      - "account"
      summary: "Partially update"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "id of the account will be updated"
        required: true
        type: "integer"
      - in: "body"
        name: "body"
        description: "New values of the account"
        required: true
        schema:
          $ref: "#/definitions/AccountPatchRequest"
      responses:
        404:
          description: "Not found"
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /product/:
    post:
      tags:
      - "product"
      summary: "Create product"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "New values of the product"
        required: true
        schema:
          $ref: "#/definitions/Product"

      responses:
        204:
          description: "Updated"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
    get:
      tags:
      - "product"
      summary: "Filter products"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit the number of accounts returned in the result. Default is\
          \ 100"
        required: false
        type: "integer"
        default: 100
      - name: "offset"
        in: "query"
        description: "Skip the first n results"
        required: false
        type: "integer"
        default: 0
      - name: "terms"
        in: "query"
        description: "The generic search terms (will search in any field)"
        required: false
        type: "string"
      - name: "name"
        in: "query"
        description: "Filter by name"
        required: false
        type: "string"
      responses:
        200:
          description: "Success"
          headers:
            X-Total-Count:
              type: "integer"
              description: "Total count of filtered entities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Invalid input"
      security:
      - oauth2: ["profile"]
  /product/{id}:
    get:
      tags:
      - "product"
      summary: "Retrieve"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The id of the product that needs to be fetched."
        required: true
        type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Product"
        404:
          description: "Not found"
      security:
      - oauth2: ["profile"]
securityDefinitions:
  oauth2:
    type: "oauth2"
    authorizationUrl: "http://localhost:5000/oauth/authorize"
    flow: "implicit"
    x-tokenInfoFunc: src.interface_adapter.http_api.auth.token_info
    scopes:
      profile: "access username & src groups of admins from LDAP"
      picsou: "manage the flow of value between accounts"
definitions:
  Transaction:
    type: "object"
    required:
    - value
    - src
    - dst
    - name
    - type
    properties:
      id:
        type: "integer"
        format: "int32"
        example: 0
        readOnly: true
      product:
        type: "integer"
        format: "int32"
        example: 0
      value:
        type: "number"
        format: "double"
        example: 42.0
      timestamp:
        type: "integer"
        format: "int32"
        example: 1552845236
        readOnly: true
      src:
        type: "integer"
        format: "int32"
        example: 0
      dst:
        type: "integer"
        format: "int32"
        example: 0
      name:
        type: "string"
        example: "Transaction test"
      attachements:
        type: "string"
      type:
        type: "integer"
        format: "int32"
        example: 0
  Member:
    type: "object"
    required:
    - email
    - firstName
    - lastName
    - username
    properties:
      email:
        type: "string"
        example: "john.doe@gmail.com"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Doe"
      username:
        type: "string"
        example: "doe_john"
      departureDate:
        type: "string"
        format: "date-time"
      comment:
        type: "string"
      associationMode:
        type: "string"
        format: "date-time"
      roomNumber:
        type: "integer"
        format: "int32"
        example: 5012
    example:
      firstName: "John"
      lastName: "Doe"
      roomNumber: 5012
      comment: "comment"
      departureDate: "2000-01-23T04:56:07.000+00:00"
      associationMode: "2000-01-23T04:56:07.000+00:00"
      email: "john.doe@gmail.com"
      username: "doe_john"
  MemberPatchRequest:
    type: "object"
    properties:
      email:
        type: "string"
        example: "john.doe@gmail.com"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Doe"
      username:
        type: "string"
        example: "doe_john"
      departureDate:
        type: "string"
        format: "date-time"
      comment:
        type: "string"
      associationMode:
        type: "string"
        format: "date-time"
      roomNumber:
        type: "integer"
        format: "int32"
        example: 5012
    example:
      firstName: "John"
      lastName: "Doe"
      roomNumber: 5012
      comment: "comment"
      departureDate: "2000-01-23T04:56:07.000+00:00"
      associationMode: "2000-01-23T04:56:07.000+00:00"
      email: "john.doe@gmail.com"
      username: "doe_john"
  Device:
    type: "object"
    required:
    - "connectionType"
    - "mac"
    properties:
      mac:
        type: "string"
        example: "01-23-45-67-89-AB"
      ipAddress:
        type: "string"
        example: "127.0.0.1"
      ipv6Address:
        type: "string"
      connectionType:
        type: "string"
        enum:
        - "wired"
        - "wireless"
      username:
        type: "string"
        example: "doe_john"
    example:
      ipv6Address: "ipv6Address"
      ipAddress: "127.0.0.1"
      connectionType: "wired"
      mac: "01-23-45-67-89-AB"
      username: "doe_john"
  Room:
    type: "object"
    required:
    - "roomNumber"
    properties:
      description:
        type: "string"
        example: "Chambre 5110"
      roomNumber:
        type: "integer"
        example: 5110
      phone:
        type: "integer"
        example: 6842
      vlan:
        type: "integer"
        example: 45
    example:
      roomNumber: 5110
      vlan: 45
      phone: 6842
      description: "Chambre 5110"
  Port:
    type: "object"
    required:
    - "portNumber"
    properties:
      id:
        type: "integer"
        example: 1
      portNumber:
        type: "string"
        example: "1/0/4"
      roomNumber:
        type: "integer"
        example: 5110
      switchID:
        type: "integer"
        example: 6
    example:
      roomNumber: 5110
      switchID: 6
      portNumber: "1/0/4"
  Switch:
    type: "object"
    required:
    - "community"
    - "ip"
    properties:
      id:
        type: "integer"
        example: 1
      description:
        type: "string"
        example: "Switch U5"
      ip:
        type: "string"
        example: "192.168.102.211"
      community:
        type: "string"
        format: "password"
        example: "ghWgpQvHRkrYuqpMLWYkstS3"
    example:
      ip: "192.168.102.211"
      description: "Switch U5"
      community: "ghWgpQvHRkrYuqpMLWYkstS3"
  MembershipRequest:
    type: "object"
    required:
    - "duration"
    properties:
      paymentMethod:
        type: "string"
        enum:
        - "cash"
        - "card"
        - "bank_cheque"
      duration:
        type: "integer"
        example: 365
        description: "Duration in days"
    example:
      duration: 365
      start: "2000-01-23T04:56:07.000+00:00"
  AccountType:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        example: 1
        readOnly: true
      name:
        type: "string"
        example: "Adhérent"
    example:
      id: 1
      name: "Adhérent"
  AccountTypePatchRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Adhérent"
    example:
      name: "Adhérent"
  PaymentMethod:
    type: "object"
    required:
    - "name"
    properties:
      id:
        type: "integer"
        example: 1
        readOnly: true
      name:
        type: "string"
        example: "Carte bancaire"
    example:
      id: 1
      name: "Carte bancaire"
  PaymentMethodPatchRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Carte bancaire"
    example:
      name: "Carte bancaire"
  Account:
    type: "object"
    required:
    - "type"
    - "actif"
    properties:
      id:
        type: "integer"
        example: 1
        description: "ID of the account"
      name:
        type: "string"
        example: "MiNET"
        description: "Name of the account"
      type:
        type: "integer"
        example: 1
        description: "ID of the type of account"
      actif:
        type: "boolean"
        example: "true"
        description: "Account state"
    example:
      type: 2
      actif: "true"
  Product:
    type: "object"
    required:
      - "buying_price"
      - "selling_price"
      - "name"
    properties:
      id:
        type: "integer"
        example: 1
        description: "ID of the product"
      buying_price:
        type: "number"
        example: 0.99
        description: "Buying price of the product"
      selling_price:
        type: "number"
        example: 0.99
        description: "Buying price of the product"
      name:
        type: "string"
        example: "Câble 5m"
        description: "Name of the product"
    example:
      id: 1
      buying_price: 0.99
      selling_price: 0.99
      name: "Câble 5m"
  AccountPatchRequest:
    type: "object"
    properties:
      name:
        type: "string"
        example: "MiNET"
      type:
        type: "integer"
        example: 2
      actif:
        type: "boolean"
        example: "true"
    example:
      name: "MiNET"
      type: 2
      actif: "true"
externalDocs:
  description: "Find out more about MiNET"
  url: "http://minet.net"
