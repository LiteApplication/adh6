openapi: 3.0.0
info:
  title: ADH6 API
  description: >
    This is the specification for **MiNET**'s ADH6 plaform. Its aim is to manage our users, devices and treasury.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
  contact:
    name: MiNET
    email: equipe@minet.net
    url: https://minet.net
servers:
  - url: https://adh6.minet.net/api/
    description: ADH6 production server
  - url: https://adh6-dev.minet.net/api/
    description: ADH6 staging server
paths:
  /health:
    get:
      summary: Retrieve the health of the API server
      description: >
        This endpoint allows for better monitoring of the state of the API.
        **TODO**: Improve the amount of information returned
      operationId: health
      responses:
        200:
          description: ADH6 is alive!
        503:
          description: Database is down.
      security: []
      tags:
      - misc
  /stats:
    get:
      summary: Retrieve global ADH6 statistics and trivia
      description: >
        This endpoint returns useful insights, statistics and data.
        It *may* be used for monitoring, although its main purpose is to be displayed as part of a dashboard.
      operationId: stats
      responses:
        200:
          description: The statistics of ADH6
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Statistics'
                type: array
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      tags:
      - misc
  /profile:
    get:
      summary: Introspection endpoint
      description: >
        This endpoint returns information about the currently logged-in user, such as their roles.
      operationId: profile
      responses:
        200:
          description: The statistics of ADH6
          content:
            application/json:
              schema:
                properties:
                  admin:
                    $ref: '#/components/schemas/Admin'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      tags:
      - misc
  /account/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractAccount'
        style: deepObject
        explode: true
      responses:
        200:
          description: The list of accounts
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter accounts
      tags:
      - account
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: The account to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: The created account
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create an account
      tags:
      - account
  /account/{account_id}:
    parameters:
      - description: The id of the account that needs to be fetched.
        in: path
        name: account_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: The fetched account
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve an account
      tags:
      - account
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractAccount'
        description: The new values for this account
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Udate an account
      tags:
      - account
  /account_type/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccountType'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          description: Invalid input
      summary: Filter account types
      tags:
      - account
  /account_type/{account_type_id}:
    parameters:
      - in: path
        name: account_type_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountType'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve an account type
      tags:
      - account
  /device/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractDevice'
        style: deepObject
        explode: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter devices
      tags:
      - device
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        description: The device to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: The created device
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create device
      tags:
      - device
  /device/{device_id}:
    parameters:
      - description: The unique identifier of the device
        in: path
        name: device_id
        required: true
        schema:
          type: integer
          example: 0
    delete:
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Delete a device
      tags:
      - device
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a device
      tags:
      - device
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractDevice'
        description: The new values for this device
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: The created device
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update a device
      tags:
      - device
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractDevice'
        description: The new values for this Device
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Partially update a device
      tags:
      - device
  /device/{device_id}/vendor:
    get:
      operationId: vendor_get
      parameters:
      - description: The unique identifier of the device
        in: path
        name: device_id
        required: true
        schema:
          type: integer
          example: 0
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  vendorname:
                    example: Cisco Systems, Inc
                    type: string
                type: object
                title: vendor
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the vendor of a device based on its MAC
      tags:
      - device
  /member/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractMember'
        style: deepObject
        explode: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Member'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter members
      tags:
      - member
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        description: The member to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: The created account
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a member
      tags:
      - member
  /member/{member_id}:
    parameters:
      - description: The unique identifier of the member
        in: path
        name: member_id
        required: true
        schema:
          type: integer
          example: 0
    delete:
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Delete a member
      tags:
      - member
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a member
      tags:
      - member
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractMember'
        description: The new values for this member
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Partially update a member
      tags:
      - member
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        description: The new values for this member
        required: true
      responses:
        201:
          description: Created
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update a member
      tags:
      - member
  /member/{member_id}/logs/:
    get:
      parameters:
      - description: The unique identifier of the member
        in: path
        name: member_id
        required: true
        schema:
          type: integer
          example: 0
      - description: Whether to fetch DHCP logs
        in: query
        name: dhcp
        required: false
        schema:
            type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  example: 2018-07-14T04:44:51.537Z Password OK
                  type: string
                type: array
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the most recent logs of a member
      tags:
      - member
  /member/{member_id}/membership/:
    parameters:
      - description: The unique identifier of the member
        in: path
        name: member_id
        required: true
        schema:
          type: integer
          example: 0
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractMembership'
        description: The membership to create
        required: true
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Add a membership record for a member
      tags:
      - membership
  /member/{member_id}/membership/{uuid}:
    parameters:
      - description: The unique identifier of the member
        in: path
        name: member_id
        required: true
        schema:
          type: integer
          example: 0
      - description: The UUID associated with this membership request
        in: path
        name: uuid
        required: true
        schema:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a membership
      tags:
      - membership
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractMembership'
        description: The new values for this member
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Partially update a membership
      tags:
      - membership
  /member/{member_id}/password/:
    put:
      parameters:
      - description: The unique identifier of the member
        in: path
        name: member_id
        required: true
        schema:
          type: integer
          example: 0
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  example: '&<Hs8XK/H+dT{7d7:=bxN~9;EqhwtW-;'
                  type: string
                  format: password
                  description: The plaintext password to use
                hashedPassword:
                  example: 'de6a3b882c1cff12af8616e1f6bf5b6c'
                  type: string
                  format: md4
                  description: The md4-hashed password to use. MD4 is obv. long-deprecated but we use NTLM for PEAP authentication...
              type: object
        description: The new value for the password, either in plaintext or pre-hashed client-side
        required: true
      responses:
        204:
          description: Modified
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update the password of a member
      tags:
      - member
  /payment_method/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentMethod'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          description: Invalid input
      summary: Filter payment methods
      tags:
      - transaction
  /payment_method/{payment_method_id}:
    parameters:
      - in: path
        name: payment_method_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a payment method
      tags:
      - transaction
  /port/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractPort'
          required: []
        style: deepObject
        explode: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Port'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter ports
      tags:
      - port
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Port'
        description: The port to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
          description: The created port
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a port
      tags:
      - port
  /port/{port_id}:
    parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
          example: 0
    delete:
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Delete a port
      tags:
      - port
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a port
      tags:
      - port
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractPort'
        description: The new values for this port
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Update a port
      tags:
      - port
  /port/{port_id}/mab/:
    parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      operationId: mab_get
      responses:
        200:
          content:
            application/json:
              schema:
                type: boolean
          description: Whether MAB is enabled on this port
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve whether MAB is enabled on this port
      tags:
      - port
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update the state of MAB on a port
      tags:
      - port
  /port/{port_id}/state/:
    parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      operationId: state_get
      responses:
        200:
          content:
            application/json:
              schema:
                type: boolean
          description: Whether the port is active
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the state of a port
      tags:
      - port
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: The new state of the port
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update the state of a port
      tags:
      - port
  /port/{port_id}/vlan/:
    parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      operationId: vlan_get
      responses:
        200:
          content:
            application/json:
              schema:
                example: 48
                type: integer
          description: The VLAN assigned to this port
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the VLAN assigned to a port
      tags:
      - port
    put:
      requestBody:
        content:
          application/json:
            schema:
              example: 48
              nullable: true
              type: integer
        description: The VLAN to assign. Set to `null` to simply restore to the default VLAN
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update the VLAN assigned to a port
      tags:
      - port
  /product/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          description: Invalid input
      summary: Filter products
      tags:
      - treasury
  /product/{product_id}:
    parameters:
      - description: The id of the product that needs to be fetched.
        in: path
        name: product_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a product
      tags:
      - treasury
  /room/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractRoom'
          required: []
        style: deepObject
        explode: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Room'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter rooms
      tags:
      - room
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        description: The room to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: The created room
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a room
      tags:
      - room
  /room/{room_id}:
    parameters:
      - in: path
        description: The unique identifier of this room
        name: room_id
        required: true
        schema:
          type: integer
          example: 0
    delete:
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Delete a room
      tags:
      - room
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a room
      tags:
      - room
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractRoom'
        description: The new values for this room
        required: true
      responses:
        201:
          description: Created
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update a room
      tags:
      - room
  /switch/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractSwitch'
          required: []
        style: deepObject
        explode: true
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Switch'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 25
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter switches
      tags:
      - switch
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switch'
        description: The switch to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Switch'
          description: The created switch
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a switch
      tags:
      - switch
  /switch/{switch_id}:
    parameters:
      - in: path
        name: switch_id
        required: true
        schema:
          type: integer
          example: 0
    delete:
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Delete a switch
      tags:
      - switch
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Switch'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a switch
      tags:
      - switch
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractSwitch'
        description: The new values for this switch
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Update a switch
      tags:
      - switch
  /transaction/:
    get:
      parameters:
      - $ref: '#/components/parameters/limitParam'
      - $ref: '#/components/parameters/skipParam'
      - $ref: '#/components/parameters/searchTermParam'
      - description: Filters by various properties
        in: query
        name: filter
        schema:
          $ref: '#/components/schemas/AbstractTransaction'
        style: deepObject
        explode: true
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
                example: 0
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Filter transactions
      tags:
      - transaction
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: The transaction to create
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: The created transaction
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a transaction
      tags:
      - transaction
  /transaction/{transaction_id}/upload/:
    parameters:
      - description: The unique identifier of the transaction
        in: path
        name: transaction_id
        required: true
        schema:
          type: integer
          example: 0
    post:
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        204:
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Upload an attachment to a transaction
      tags:
      - transaction
  /transaction/{transaction_id}:
    parameters:
      - description: The unique identifier of the transaction that needs to be fetched
        in: path
        name: transaction_id
        required: true
        schema:
          type: integer
          example: 0
    get:
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Success
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve a transaction
      tags:
      - transaction
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractTransaction'
        description: The new values for this transaction
        required: true
      responses:
        204:
          description: Updated
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Partially update a transaction
      tags:
      - transaction
  /bug_report/:
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BugReport'
        description: The bug report to create
        required: true
      responses:
        204:
          description: Created
        400:
          $ref: '#/components/responses/Invalid'
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Create a new bug report
      tags:
      - misc
    get:
      operationId: get_labels
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  labels:
                    items:
                      type: string
                    type: array
                type: object
                title: labels
          description: Success
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the available Gitlab labels
      tags:
      - misc
  /treasury/cashbox:
    get:
      operationId: get_cashbox
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  fond:
                    description: balance in the cashbox
                    example: 1
                    type: number
                  coffre:
                    description: balance in the coffre
                    example: 1
                    type: number
                type: object
                title: cashbox
          description: Success
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the state of the cashbox
      tags:
      - treasury
  /treasury/bank:
    get:
      operationId: get_bank
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  expectedCav:
                    description: the expected balance of MiNET's CAV accunt
                    type: number
                    format: double
                type: object
                title: bank
          description: Success
        403:
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
      summary: Retrieve the expected state of MiNET's bank accounts
      tags:
      - treasury

components:
  parameters:
    limitParam:
      description: Limit the number of results returned
      in: query
      name: limit
      required: false
      schema:
        default: 25
        type: integer
    skipParam:
      description: Skip the first n results
      in: query
      name: offset
      required: false
      schema:
        default: 0
        type: integer
    searchTermParam:
      description: The generic search terms (will search in any field)
      in: query
      name: terms
      required: false
      schema:
        type: string
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: The user has insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Invalid:
      description: The request received invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unexpected:
      description: The request encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    AbstractMembership:
      type: object
      properties:
        uuid:
          description: The UUID associated with this membership request
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
          readOnly: true
        duration:
          description: The requested duration (in days) for this membership
          type: integer
          enum: [30, 60, 90, 120, 150, 180, 360]
          nullable: true
        products:
          description: A list of products to buy
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Product'
              - type: integer
          example: [1, 2]
        firstTime:
          description: Whether this is the first membership request ever for this member
          type: boolean
          example: false
        paymentMethod:
          description: The payment method to be used for the transaction
          oneOf:
            - $ref: '#/components/schemas/PaymentMethod'
            - type: integer
          example: 4
        account:
          description: The source account from which to execute the transaction
          oneOf:
            - $ref: '#/components/schemas/Account'
            - type: integer
          example: 4
        member:
          description: The member to whom this membership applies
          oneOf:
            - $ref: '#/components/schemas/Member'
            - type: integer
          example: 4
        status:
          type: string
          enum:
            - INITIAL
            - PENDING_RULES
            - PENDING_PAYMENT_INITIAL
            - PENDING_PAYMENT
            - PENDING_PAYMENT_VALIDATION
            - COMPLETE
            - CANCELLED
            - ABORTED
          example: INITIAL
          description: >
            The current status of this membership request:
             * `INITIAL` - Just created
             * `PENDING_RULES` - Waiting for the member to sign the rules
             * `PENDING_PAYMENT_INITIAL` - Initiating the payment flow
             * `PENDING_PAYMENT` - During the payment flow
             * `PENDING_PAYMENT_VALIDATION` - After the payment flow, waiting for confirmation
             * `COMPLETE` - The membership request is completed
             * `CANCELLED` - The membership has been cancelled
             * `ABORTED` - The membership request flow was aborted
            Do note that some of the steps may be skipped depending on the payment method,
            whether or not this is the member's first membership request etc.
        createdAt:
          description: The date-time at which this membership request was first created
          format: date-time
          type: string
        updatedAt:
          description: The date-time at which this membership request was last updated
          format: date-time
          type: string
    Membership:
      allOf:
        - $ref: '#/components/schemas/AbstractMembership'
        - required:
            - uuid
            - duration
            - products
            - paymentMethod
            - account
            - member
            - status
      type: object
    AbstractAccount:
      type: object
      properties:
        actif:
          description: Whether this account is active or not
          example: true
          type: boolean
        pinned:
          description: Whether this account should be displayed before others
          example: true
          type: boolean
        compteCourant:
          description: Whether this account depends on MiNET's main account
          example: true
          type: boolean
        accountType:
          description: The type of this account
          oneOf:
            - $ref: '#/components/schemas/AccountType'
            - type: integer
          example: 2
        creationDate:
          description: The date-time at which this account was first created
          format: date-time
          type: string
        member:
          description: The member this account belongs to
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Member'
            - type: integer
          example: 4
        name:
          description: The name of this account
          example: MiNET
          type: string
        id:
          description: The unique identifier of this account
          example: 1
          readOnly: true
          type: integer
        balance:
          description: The current balance of this account
          readOnly: true
          nullable: true
          type: number
          format: double
          example: 332.4
        pendingBalance:
          description: The pending balance of this account
          readOnly: true
          nullable: true
          type: number
          format: double
          example: 321.1
    Account:
      allOf:
        - $ref: '#/components/schemas/AbstractAccount'
        - required:
            - id
            - accountType
            - name
            - balance
            - pendingBalance
      type: object
    AccountType:
      type: object
      properties:
        id:
          example: 1
          readOnly: true
          type: integer
        name:
          example: "Adh\xE9rent"
          type: string
    AbstractTransaction:
      type: object
      properties:
        id:
          description: The unique identifier of this transaction
          example: 0
          readOnly: true
          type: integer
        name:
          description: The description of this transaction
          example: Sample transaction
          type: string
        src:
          description: The source account of this transaction
          oneOf:
            - $ref: '#/components/schemas/Account'
            - type: integer
          example: 4
        dst:
          description: The destination account of this transaction
          oneOf:
            - $ref: '#/components/schemas/Account'  
            - type: integer
          example: 1
        timestamp:
          description: The date-time at which this transaction was executed
          format: date-time
          readOnly: true
          type: string
        paymentMethod:
          description: The payment method used for this transaction
          oneOf:
            - $ref: "#/components/schemas/PaymentMethod"
            - type: integer
        value:
          description: The unsigned value of this transaction
          example: 42.0
          format: double
          minimum: 0
          exclusiveMinimum: true
          type: number
        attachments:
          description: The list of attachments linked with this transaction
          type: array
          items:
            type: string
          example: [ "3b2f552df763bc9444f9f31a4fd831a3e3ace994" ]
        author:
          description: The member who executed this transaction
          oneOf:
            - $ref: '#/components/schemas/Member'
            - type: integer
          example: 6
        pendingValidation:
          description: Whether this transaction is awaiting confirmation from a member with higher privileges
          example: true
          type: boolean
          readOnly: true
        cashbox:
          description: Whether to use the cashbox or not
          enum:
            - to
            - from
            - direct
          writeOnly: true
    Transaction:
      allOf:
        - $ref: '#/components/schemas/AbstractTransaction'
        - required:
            - id
            - name
            - src
            - dst
            - paymentMethod
            - value
      type: object
    AbstractPaymentMethod:
      type: object
      properties:
        id:
          description: The unique identifier of this payment method
          example: 0
          readOnly: true
          type: integer
        staticFee:
          description: The static fee for this payment method in euros
          example: 0.25
          type: number
        dynamicFee:
          description: The dynamic fee for this payment method as a percentage
          example: 0.05
          minimum: 0
          maximum: 1
          type: number
        name:
          description: The friendly name of this payment method
          example: Carte bancaire
          type: string
    PaymentMethod:
      allOf:
        - $ref: '#/components/schemas/AbstractPaymentMethod'
        - required:
            - id
            - name
      type: object
    AbstractProduct:
      type: object
      properties:
        id:
          description: The unique identifier of this product
          example: 0
          readOnly: true
          type: integer
        buyingPrice:
          description: The buying price of this product
          example: 42.3
          type: number
          format: double
        sellingPrice:
          description: The selling price of this product
          example: 43.2
          type: number
          format: double
        name:
          description: The friendly name of this product
          example: "C\xE2ble 5m"
          type: string
    Product:
      allOf:
        - $ref: '#/components/schemas/AbstractProduct'
        - required:
            - id
            - name
            - sellingPrice
      type: object
    AbstractDevice:
      type: object
      properties:
        id:
          description: The unique identifier of this device
          example: 0
          readOnly: true
          type: integer
        connectionType:
          description: The connection type of this device
          enum:
          - wired
          - wireless
          type: string
        ipv4Address:
          description: The ipv4 address assigned to this device
          example: 127.0.0.1
          nullable: true
          format: ipv4
          type: string
        ipv6Address:
          description: The ipv6 address assigned to this device
          example: ::1
          nullable: true
          format: ipv6
          type: string
        mac:
          description: The MAC address of this device
          example: 01-23-45-67-89-AB
          format: mac
          type: string
        member:
          description: The member this device belongs to
          oneOf:
            - $ref: '#/components/schemas/Member'
            - type: integer
          example: 4
    Device:
      allOf:
        - $ref: '#/components/schemas/AbstractDevice'
        - required:
            - id
            - connectionType
            - mac
            - member
      type: object
    Admin:
      type: object
      required:
        - login
        - roles
      properties:
        login:
          description: The login of this administrator
          example: PowerfulPotato
          type: string
        roles:
          description: The list of roles of this administrator
          example: [ "adh6_user", "adh6_admin" ]
          type: array
          items:
            type: string
    AbstractMember:
      type: object
      properties:
        id:
          description: The unique identifier of this member
          example: 0
          readOnly: true
          type: integer
        username:
          description: The username of this member
          example: michel_j
          type: string
        associationMode:
          description: The date-time at which the association mode expires
          format: date-time
          readOnly: true
          type: string
        comment:
          description: The optional comment for this member
          nullable: true
          type: string
          example: Aime bien les bananes
        departureDate:
          description: The date-time at which the subscription of this member expires
          format: date-time
          type: string
        email:
          description: The email address of this member
          example: jean-michel.martin@example.com
          type: string
          format: email
        firstName:
          description: The first name of this member
          example: Jean-Michel
          type: string
        lastName:
          description: The last name of this member
          example: Martin
          type: string
        room:
          description: The room this member lives in
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/Room'
            - type: integer
          example: 4
    Member:
      allOf:
        - $ref: '#/components/schemas/AbstractMember'
        - required:
            - id
            - username
            - email
            - firstName
            - lastName
      type: object
    MembershipRequest:
      type: object
      required:
        - duration
        - paymentMethod
        - firstTime
      properties:
        duration:
          description: The duration in days this membership is for
          example: 365
          type: integer
        paymentMethod:
          description: The payment method used to pay the membership fee
          oneOf:
            - $ref: '#/components/schemas/PaymentMethod'
            - type: integer
          example: 4
        firstTime:
          description: Whether or not this membership request is the member's first
          type: boolean
          example: false
    AbstractRoom:
      type: object
      properties:
        id:
          description: The unique identifier of this room
          example: 0
          readOnly: true
          type: integer
        description:
          description: The friendly description of this room
          example: Chambre 5110
          nullable: true
          type: string
        roomNumber:
          description: The room number according to the Maisel
          example: 5110
          type: integer
        vlan:
          description: The main vlan assigned to this room
          type: integer
          example: 41
    Room:
      allOf:
        - $ref: '#/components/schemas/AbstractRoom'
        - required:
            - id
            - description
            - roomNumber
            - vlan
      type: object
    AbstractPort:
      type: object
      properties:
        id:
          description: The unique identifier of this port
          example: 0
          readOnly: true
          type: integer
        portNumber:
          description: The friendly (Cisco) number of this port
          nullable: true
          example: 1/0/4
          type: string
        oid:
          description: The oid of this port for SNMP access
          example: 10104
          type: string
        room:
          description: The room this port is in
          oneOf:
            - $ref: '#/components/schemas/Room'
            - type: integer
          example: 4
        switchObj:
          description: The switch this port is a member of
          oneOf:
            - $ref: '#/components/schemas/Switch'
            - type: integer
          example: 4
    Port:
      allOf:
        - $ref: '#/components/schemas/AbstractPort'
        - required:
            - id
            - portNumber
            - oid
            - room
            - switchObj
      type: object
    AbstractSwitch:
      type: object
      properties:
        id:
          description: The unique identifier of this switch
          example: 0
          readOnly: true
          type: integer
        description:
          description: The friendly name of this switch
          example: Switch U5
          type: string
        community:
          description: The community string used for SNMP access to this switch
          example: ghWgpQvHRkrYuqpMLWYkstS3
          format: password
          type: string
        ip:
          description: The IPv4 address of this switch
          example: 192.168.102.211
          type: string
          format: ipv4
    Switch:
      allOf:
        - $ref: '#/components/schemas/AbstractSwitch'
        - required:
            - id
            - description
            - community
            - ip
      type: object
    Vlan:
      type: object
      required:
        - id
        - number
        - ipv4Network
        - ipv6Network
      properties:
        id:
          description: The unique identifier of this vlan
          example: 0
          readOnly: true
          type: integer
        number:
          description: The number of this VLAN
          minimum: 1
          maximum: 2048
          type: integer
          example: 41
        ipv4Network:
          description: The IPv4 network range for this VLAN
          type: string
          example: "157.159.41.0/24"
        ipv6Network:
          description: The IPv5 network range for this VLAN
          type: string
          example: "2001:660:3203:403::/64"
    BugReport:
      type: object
      required:
        - title
        - description
        - labels
      properties:
        title:
          description: The title of this bug report
          type: string
          example: Broken API calls
        description:
          description: The description of this bug report
          type: string
          example: All API calls are broken
        labels:
          description: The list of labels for this bug report
          type: array
          items:
            type: string
          example: [ "backend", "api" ]
    Statistics:
      type: object
      properties:
        activeAccounts:
          description: The count of active accounts
          type: integer
          example: 5
          readOnly: true
    Error:
      type: object
      properties:
        code:
          description: The error code
          type: integer
          example: 404
        message:
          description: The friendly description of the error
          type: string
          example: Not found
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cas.minet.net/oidc/authorize
          scopes:
            profile: The user's basic information, including groups they are a part of

security:
- OAuth2: [profile]

tags:
- description: Operations on members
  name: member
- description: Manage membership records
  name: membership
- description: Operations on devices
  name: device
- description: Operations on rooms
  name: room
- description: Operations on switches
  name: switch
- description: Operations on ports
  name: port
- description: Operations on accounts
  name: account
- description: Operations on transactions
  name: transaction
- description: Operations on the treasury
  name: treasury
- description: Miscellaneous endpoints
  name: misc