openapi: 3.0.0
externalDocs:
  description: Find out more about MiNET
  url: http://minet.net
info:
  description: 'Adherent api'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Adherent
  version: 1.0.0
servers:
  - url: /api
paths:
  /account/:
    get:
      parameters:
      - description: Limit the number of accounts returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: The generic search terms (will search in any field)
        in: query
        name: terms
        required: false
        schema:
          type: string
      - description: Filter by name
        in: query
        name: name
        required: false
        schema:
          type: string
      - description: Filter by type
        in: query
        name: type
        required: false
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Account'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter accounts
      tags:
      - account
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        description: New values of the account
        required: true
      responses:
        200:
          description: Created
        400:
          description: Invalid input
      summary: Create account
      tags:
      - account
  /account/{account_id}:
    get:
      parameters:
      - description: The id of the account that needs to be fetched.
        in: path
        name: account_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Success
        404:
          description: Not found
      summary: Retrieve
      tags:
      - account
    patch:
      parameters:
      - description: id of the account will be updated
        in: path
        name: account_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPatchRequest'
        description: New values of the account
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Partially update
      tags:
      - account
  /account_type/:
    get:
      parameters:
      - description: Limit the number of account types returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AccountType'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter account types
      tags:
      - account_type
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountType'
        description: Account type to create
        required: true
      responses:
        200:
          description: Created
          headers:
            Location:
              description: URI to the newly created account type
              schema:
                type: string
        400:
          description: Invalid input
      summary: Create an account type
      tags:
      - account_type
  /account_type/{account_type_id}:
    get:
      parameters:
      - in: path
        name: account_type_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountType'
          description: Success
        404:
          description: Not found
      summary: Retrieve an account type
      tags:
      - account_type
    patch:
      parameters:
      - description: Name of the account type will be updated
        in: path
        name: account_type_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountTypePatchRequest'
        description: New values of the account type
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Partially update
      tags:
      - account_type
  /device/:
    get:
      parameters:
      - description: Limit the number of devices returned in the result. Default is
          100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Filter by owner's username
        in: query
        name: username
        required: false
        schema:
          type: string
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Device'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter devices
      tags:
      - device
  /device/{mac_address}:
    delete:
      parameters:
      - description: The mac address of the device that will be deleted
        in: path
        name: mac_address
        required: true
        schema:
          type: string
      responses:
        204:
          description: Deleted
        404:
          description: Not found
      summary: Delete a device
      tags:
      - device
    get:
      parameters:
      - description: The mac address of the device that will be fetched
        in: path
        name: mac_address
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
          description: Success
        404:
          description: Not found
      summary: Retrieve a device
      tags:
      - device
    put:
      parameters:
      - description: The mac address of the device that will be update
        in: path
        name: mac_address
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        description: Device to update
        required: true
      responses:
        201:
          description: Created
        204:
          description: Updated
        400:
          description: Invalid input
      summary: Update/create a device
      tags:
      - device
  /device/{mac_address}/vendor:
    get:
      operationId: vendor_get
      parameters:
      - description: The mac address of the device that will be looked up
        in: path
        name: mac_address
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  vendorname:
                    example: Cisco Systems, Inc
                    type: string
                type: object
          description: Success
        404:
          description: No match
      summary: Retrieve the vendor of a device based on its MAC
      tags:
      - device
  /member/:
    get:
      parameters:
      - description: Limit the number of members returned in the result. Default is
          100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: The generic search terms (will search in any field)
        in: query
        name: terms
        required: false
        schema:
          type: string
      - description: Filter by room number
        in: query
        name: roomNumber
        required: false
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Member'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter members
      tags:
      - member
  /member/{username}:
    delete:
      parameters:
      - description: The username of the member that will be deleted
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        204:
          description: Deleted
        404:
          description: Not found
      summary: Delete
      tags:
      - member
    get:
      parameters:
      - description: The username of the member that needs to be fetched.
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: Success
        404:
          description: Not found
      summary: Retrieve
      tags:
      - member
    patch:
      parameters:
      - description: username of the member will be updated
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberPatchRequest'
        description: New values of the member
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Partially update
      tags:
      - member
    put:
      parameters:
      - description: username of the member will be updated
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        description: New values of the member
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
      summary: Update/create
      tags:
      - member
  /member/{username}/logs/:
    get:
      parameters:
      - description: username of the member
        in: path
        name: username
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  example: 2018-07-14T04:44:51.537Z Password OK
                  type: string
                type: array
          description: Success
        404:
          description: Not found
      summary: Get the most recent logs
      tags:
      - member
  /member/{username}/membership/:
    post:
      parameters:
      - description: The username of the member
        in: path
        name: username
        required: true
        schema:
          type: string
      - description: Just a random string to ensure that membership creation is idempotent
          (very important since double submission may result to the member being charged
          two times). I recommand using a long random string for that.
        in: header
        name: X-Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipRequest'
        description: 'Membership record, if no start is specified, it will use the
          current date. Duration is expressed in days. WARNING: DO NOT set the start
          date to be in the future, it is not implemented for the moment.'
        required: true
      responses:
        200:
          description: Success
        400:
          description: Invalid input
      summary: Add a membership record for an member
      tags:
      - membership
  /member/{username}/password/:
    put:
      parameters:
      - description: username of the member will be updated
        in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                password:
                  example: '&<Hs8XK/H+dT{7d7:=bxN~9;EqhwtW-;'
                  type: string
              required:
              - password
              type: object
        description: New values of the member
        required: true
      responses:
        204:
          description: Modified
        404:
          description: Not found
      summary: Update password
      tags:
      - member
  /payment_method/:
    get:
      parameters:
      - description: Limit the number of payment methods returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentMethod'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter payment methods
      tags:
      - payment_method
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
        description: Payment method to create
        required: true
      responses:
        200:
          description: Created
          headers:
            Location:
              description: URI to the newly created payment method
              schema:
                type: string
        400:
          description: Invalid input
      summary: Create a payment method
      tags:
      - payment_method
  /payment_method/{payment_method_id}:
    get:
      parameters:
      - in: path
        name: payment_method_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Success
        404:
          description: Not found
      summary: Retrieve a payment method
      tags:
      - payment_method
    patch:
      parameters:
      - description: Name of the payment method will be updated
        in: path
        name: payment_method_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodPatchRequest'
        description: New values of the payment method
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Partially update
      tags:
      - payment_method
  /port/:
    get:
      parameters:
      - description: Limit the number of ports returned in the result. Default is
          100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Filter only ports from that switch
        in: query
        name: switchID
        required: false
        schema:
          type: integer
      - description: Filter only ports from that room
        in: query
        name: roomNumber
        required: false
        schema:
          type: integer
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Port'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter ports
      tags:
      - port
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Port'
        description: Port to create
        required: true
      responses:
        200:
          description: Created
          headers:
            Location:
              description: URI to the newly created port
              schema:
                type: string
        400:
          description: Invalid input
      summary: Create a port
      tags:
      - port
  /port/{port_id}:
    delete:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Deleted
        404:
          description: Not found
      summary: Delete a port
      tags:
      - port
    get:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Port'
          description: Success
        404:
          description: Not found
      summary: Retrieve a port
      tags:
      - port
    put:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Port'
        description: Port to update
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Update a port
      tags:
      - port
  /port/{port_id}/mab/:
    get:
      operationId: mab_get
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: boolean
          description: True if MAB is enabled
        404:
          description: Not found
      summary: Check whether MAB is enable on this port or not.
      tags:
      - port
    put:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        204:
          description: Updated
        404:
          description: Not found
      summary: Enable/disable MAB on a port
      tags:
      - port
  /port/{port_id}/state/:
    get:
      operationId: state_get
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: boolean
          description: Success, false if it is shutdown, true otherwise
        404:
          description: Not found
      summary: Retrieve the status of a port.
      tags:
      - port
    put:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: True to open, False to shutdown
        required: true
      responses:
        204:
          description: Updated
        404:
          description: Not found
      summary: Shutdown/enable a port
      tags:
      - port
  /port/{port_id}/vlan/:
    get:
      operationId: vlan_get
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                example: 48
                type: integer
          description: Success, returns 1 if the port has authentication on
        404:
          description: Not found
      summary: Retrieve the VLAN assigned to the port.
      tags:
      - port
    put:
      parameters:
      - in: path
        name: port_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              example: 48
              type: integer
        description: VLAN to assign. Set it to 1 if you want to enable authentication
          on the port.
        required: true
      responses:
        204:
          description: Updated
        404:
          description: Not found
      summary: Change the VLAN assigned a to port
      tags:
      - port
  /product/:
    get:
      parameters:
      - description: Limit the number of accounts returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: The generic search terms (will search in any field)
        in: query
        name: terms
        required: false
        schema:
          type: string
      - description: Filter by name
        in: query
        name: name
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter products
      tags:
      - product
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        description: New values of the product
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
      summary: Create product
      tags:
      - product
  /product/{id}:
    get:
      parameters:
      - description: The id of the product that needs to be fetched.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: Success
        404:
          description: Not found
      summary: Retrieve
      tags:
      - product
  /room/:
    get:
      parameters:
      - description: Limit the number of rooms returned in the result. Default is
          100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Room'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter rooms
      tags:
      - room
  /room/{roomNumber}:
    delete:
      parameters:
      - in: path
        name: roomNumber
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Deleted
        404:
          description: Not found
      summary: Delete a room
      tags:
      - room
    get:
      parameters:
      - in: path
        name: roomNumber
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: Success
        404:
          description: Not found
      summary: Retrieve a room
      tags:
      - room
    put:
      parameters:
      - in: path
        name: roomNumber
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
        description: Room to update
        required: true
      responses:
        201:
          description: Created
        204:
          description: Updated
        400:
          description: Invalid input / no more IP
      summary: Update/create a room
      tags:
      - room
  /switch/:
    get:
      parameters:
      - description: Limit the number of switches returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: Search terms
        in: query
        name: terms
        required: false
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Switch'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Get all switches
      tags:
      - switch
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switch'
        description: Switch to create
        required: true
      responses:
        200:
          description: Created
          headers:
            Location:
              description: URI to the newly created switch
              schema:
                type: string
        400:
          description: Invalid input
      summary: Create a switch
      tags:
      - switch
  /switch/{switchID}:
    delete:
      parameters:
      - in: path
        name: switchID
        required: true
        schema:
          type: integer
      responses:
        204:
          description: Deleted
        404:
          description: Not found
      summary: Delete a switch
      tags:
      - switch
    get:
      parameters:
      - in: path
        name: switchID
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Switch'
          description: Success
        404:
          description: Not found
      summary: Retrieve a switch
      tags:
      - switch
    put:
      parameters:
      - in: path
        name: switchID
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Switch'
        description: Switch to update
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
        404:
          description: Not found
      summary: Update a switch
      tags:
      - switch
  /temporary_account/:
    delete:
      responses:
        204:
          description: Success
      summary: Revoke all active temporary accounts.
      tags:
      - temporary_account
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                firstname:
                  example: Jean
                  type: string
                lastname:
                  example: Dupont
                  type: string
              type: object
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  access_token:
                    example: NAINA_AMLKSJQLMHFQ
                    type: string
                type: object
          description: Success
      summary: Create new temporary account for this day. Only super admins can do
        that.
      tags:
      - temporary_account
  /transaction/:
    get:
      parameters:
      - description: Limit the number of transactions returned in the result. Default
          is 100
        in: query
        name: limit
        required: false
        schema:
          default: 100
          type: integer
      - description: Skip the first n results
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
      - description: The generic search terms (will search in any field)
        in: query
        name: terms
        required: false
        schema:
          type: string
      - description: Filter by account id (either as source or destination)
        in: query
        name: account
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
          description: Success
          headers:
            X-Total-Count:
              description: Total count of filtered entities
              schema:
                type: integer
        400:
          description: Invalid input
      summary: Filter transactions
      tags:
      - transaction
    post:
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: Transaction to create
        required: true
      responses:
        200:
          description: Created
          headers:
            Location:
              description: URI to the newly created transaction
              schema:
                type: string
        400:
          description: Invalid input
      summary: Create a transaction
      tags:
      - transaction
  /transaction/{transaction_id}:
    get:
      parameters:
      - description: The unique identifier of the transaction that needs to be fetched
        in: path
        name: transaction_id
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Success
        404:
          description: Not found
      summary: Retrieve
      tags:
      - transaction
    put:
      parameters:
      - description: The unique identifier of the transaction that needs to be updated
        in: path
        name: transaction_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: New values for the transaction, only the attachments can be modified
        required: true
      responses:
        204:
          description: Updated
        400:
          description: Invalid input
      summary: Update/create
      tags:
      - transaction
components:
  schemas:
    Account:
      example:
        actif: 'true'
        type: 2
      properties:
        actif:
          description: Account state
          example: 'true'
          type: boolean
        id:
          description: ID of the account
          example: 1
          type: integer
        name:
          description: Name of the account
          example: MiNET
          type: string
        type:
          description: The type of account
          example: 'adherent'
          type: string
        creation_date:
          description: The date the account was created
          format: date-time
          type: string
      required:
      - type
      - actif
      type: object
    AccountPatchRequest:
      example:
        actif: 'true'
        name: MiNET
        type: 2
      properties:
        actif:
          example: 'true'
          type: boolean
        name:
          example: MiNET
          type: string
        type:
          example: 2
          type: integer
      type: object
    AccountType:
      example:
        id: 1
        name: "Adh\xE9rent"
      properties:
        id:
          example: 1
          readOnly: true
          type: integer
        name:
          example: "Adh\xE9rent"
          type: string
      required:
      - name
      type: object
    AccountTypePatchRequest:
      example:
        name: "Adh\xE9rent"
      properties:
        name:
          example: "Adh\xE9rent"
          type: string
      type: object
    Device:
      example:
        connectionType: wired
        ipAddress: 127.0.0.1
        ipv6Address: ipv6Address
        mac: 01-23-45-67-89-AB
        username: doe_john
      properties:
        connectionType:
          enum:
          - wired
          - wireless
          type: string
        ipAddress:
          example: 127.0.0.1
          type: string
        ipv6Address:
          type: string
        mac:
          example: 01-23-45-67-89-AB
          type: string
        username:
          example: doe_john
          type: string
      required:
      - connectionType
      - mac
      type: object
    Member:
      example:
        associationMode: '2000-01-23T04:56:07.000+00:00'
        comment: comment
        departureDate: '2000-01-23T04:56:07.000+00:00'
        email: john.doe@gmail.com
        firstName: John
        lastName: Doe
        roomNumber: 5012
        username: doe_john
      properties:
        associationMode:
          format: date-time
          type: string
        comment:
          type: string
        departureDate:
          format: date-time
          type: string
        email:
          example: john.doe@gmail.com
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: Doe
          type: string
        roomNumber:
          example: 5012
          format: int32
          type: integer
        username:
          example: doe_john
          type: string
      required:
      - email
      - firstName
      - lastName
      - username
      type: object
    MemberPatchRequest:
      example:
        associationMode: '2000-01-23T04:56:07.000+00:00'
        comment: comment
        departureDate: '2000-01-23T04:56:07.000+00:00'
        email: john.doe@gmail.com
        firstName: John
        lastName: Doe
        roomNumber: 5012
        username: doe_john
      properties:
        associationMode:
          format: date-time
          type: string
        comment:
          type: string
        departureDate:
          format: date-time
          type: string
        email:
          example: john.doe@gmail.com
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: Doe
          type: string
        roomNumber:
          example: 5012
          format: int32
          type: integer
        username:
          example: doe_john
          type: string
      type: object
    MembershipRequest:
      example:
        duration: 365
        start: '2000-01-23T04:56:07.000+00:00'
      properties:
        duration:
          description: Duration in days
          example: 365
          type: integer
        paymentMethod:
          enum:
          - cash
          - card
          - bank_cheque
          type: string
      required:
      - duration
      type: object
    PaymentMethod:
      example:
        id: 1
        name: Carte bancaire
      properties:
        id:
          example: 1
          readOnly: true
          type: integer
        name:
          example: Carte bancaire
          type: string
      required:
      - name
      type: object
    PaymentMethodPatchRequest:
      example:
        name: Carte bancaire
      properties:
        name:
          example: Carte bancaire
          type: string
      type: object
    Port:
      example:
        portNumber: 1/0/4
        roomNumber: 5110
        switchID: 6
      properties:
        id:
          example: 1
          type: integer
        portNumber:
          example: 1/0/4
          type: string
        roomNumber:
          example: 5110
          type: integer
        switchID:
          example: 6
          type: integer
      required:
      - portNumber
      type: object
    Product:
      example:
        buying_price: 0.99
        id: 1
        name: "C\xE2ble 5m"
        selling_price: 0.99
      properties:
        buying_price_in_cents:
          description: Buying price of the product (in cents)
          example: 99
          type: integer
        id:
          description: ID of the product
          example: 1
          type: integer
        name:
          description: Name of the product
          example: "C\xE2ble 5m"
          type: string
        selling_price_in_cents:
          description: Buying price of the product (in cents)
          example: 99
          type: integer
      required:
      - buying_price_in_cents
      - selling_price_in_cents
      - name
      type: object
    Room:
      example:
        description: Chambre 5110
        phone: 6842
        roomNumber: 5110
        vlan: 45
      properties:
        description:
          example: Chambre 5110
          type: string
        phone:
          example: 6842
          type: integer
        roomNumber:
          example: 5110
          type: integer
        vlan:
          example: 45
          type: integer
      required:
      - roomNumber
      type: object
    Switch:
      example:
        community: ghWgpQvHRkrYuqpMLWYkstS3
        description: Switch U5
        ip: 192.168.102.211
      properties:
        community:
          example: ghWgpQvHRkrYuqpMLWYkstS3
          format: password
          type: string
        description:
          example: Switch U5
          type: string
        id:
          example: 1
          type: integer
        ip:
          example: 192.168.102.211
          type: string
      required:
      - community
      - ip
      type: object
    Transaction:
      properties:
        attachments:
          type: string
        dst:
          example: 0
          format: int32
          type: integer
        id:
          example: 0
          format: int32
          readOnly: true
          type: integer
        name:
          example: Transaction test
          type: string
        src:
          example: 0
          format: int32
          type: integer
        timestamp:
          example: '2000-01-23T04:56:07.000+00:00'
          format: date-time
          readOnly: true
          type: string
        payment_method:
          example: 'liquide'
          type: string
        value:
          example: 42.0
          format: double
          type: number
      required:
      - value
      - src
      - dst
      - name
      - payment_method
      type: object

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://cas.minet.net/oauth2.0/authorize
          scopes:
            profile: Read the profile of the user to get their LDAP groups

# security:
# - OAuth2: [profile]

tags:
- description: Operations on members
  name: member
- description: Manage membership records
  name: membership
- description: Operations on devices
  name: device
- description: Operations on rooms
  name: room
- description: Operations on switches
  name: switch
- description: Operations on ports
  name: port
- description: Temporary accounts
  name: temporary_account

